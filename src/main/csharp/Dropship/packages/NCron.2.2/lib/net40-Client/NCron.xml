<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCron</name>
    </assembly>
    <members>
        <member name="T:NCron.Fluent.SchedulePart">
            <summary>
            Represents a semi-configured schedule entry (without any job callback defined) in the fluent API.
            </summary>
        </member>
        <member name="M:NCron.Fluent.SchedulePart.Run(System.Func{NCron.ICronJob})">
            <summary>
            Configures the schedule to run a job resolved using a specified closure.
            </summary>
            <param name="jobCallback">A method to create the <see cref="T:NCron.ICronJob"/> to be executed in the schedule.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="M:NCron.Fluent.SchedulePart.With``1(System.Func{``0})">
            <summary>
            Configures the schedule to resolve its jobs using a specified container.
            </summary>
            <typeparam name="TContainer">The type of container used for this schedule.</typeparam>
            <param name="containerCallback">A method to create a container to be used for job resolving.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="T:NCron.Fluent.SchedulePart`1">
            <summary>
            Represents a semi-configured schedule entry (without any job callback defined) in the fluent API.
            </summary>
        </member>
        <member name="M:NCron.Fluent.SchedulePart`1.Run(System.Func{`0,NCron.ICronJob})">
            <summary>
            Configures the schedule to run a job resolved from a container using a specified closure.
            </summary>
            <param name="jobCallback">A method to create the <see cref="T:NCron.ICronJob"/> to be executed in the schedule.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="T:NCron.CronContext">
            <summary>
            Holds information about the context in which a cron job is being executed.
            Most importantly, the <see cref="P:NCron.CronContext.Log"/> property gives access to a job specific log.
            </summary>
        </member>
        <member name="M:NCron.CronContext.#ctor(NCron.ICronJob,NCron.Logging.ILog)">
            <summary>
            Creates a new <see cref="T:NCron.CronContext"/> with all properties explicitly set.
            </summary>
            <param name="job">The job being executed.</param>
            <param name="log">Tog to be used while executing the job in this context.</param>
        </member>
        <member name="P:NCron.CronContext.Job">
            <summary>
            Gets the job being executed.
            </summary>
        </member>
        <member name="P:NCron.CronContext.Log">
            <summary>
            Gets the log to be used while executing the job in this context.
            </summary>
        </member>
        <member name="T:NCron.Service.JobExecutionWrapper">
            <summary>
            Represents a method that wraps the execution of a job, allowing dependencies to be resolved and released appropriatly.
            Implementations will typically be in three steps: (1) resolve dependencies and job, (2) invoke callback, (3) release job and dependencies.
            </summary>
            <param name="executionCallback">A method that will initialize and execute the job. This method should be invoked once the job is fully constructed.</param>
        </member>
        <member name="T:NCron.Service.Bootstrap">
            <summary>
            Defines the method which should be called from the entry point of all NCron based applications.
            </summary>
        </member>
        <member name="M:NCron.Service.Bootstrap.Init(System.String[],System.Action{NCron.Service.ISchedulingService})">
            <summary>
            Initilizes an NCron based application with a specified set of command line parameters and service setup handler.
            A cllas to this method should be made from the main entry point of all NCron based applicaitons.
            </summary>
            <param name="args">The command line parameters passed to the application.</param>
            <param name="setupHandler">A method that sets up the scheduling service according to application needs.</param>
        </member>
        <member name="T:NCron.Logging.EventLogAdapter">
            <summary>
            Implements the <see cref="T:NCron.Logging.ILog"/> interface on top of a <see cref="T:System.Diagnostics.EventLog"/> instance.
            Debug messages are ignored, and all other messages are written to the underlying event log.
            </summary>
        </member>
        <member name="T:NCron.Logging.ILog">
            <summary>
            Defines the interface of a log to which cron jobs can write messages of different severity levels.
            </summary>
            <remarks>
            All methods in this interface takes only delegate typed parameters, allowing implementers to opt out of parameters by not invoking the delegates.
            If an implementation is designed to ignore messages of a specific severity level, there is no need to do expensive string manipulation (for the error message) or build a stack trace (for an exception).
            </remarks>
        </member>
        <member name="M:NCron.Logging.ILog.Debug(System.Func{System.String})">
            <summary>
            Writes a "debug" level message to the log.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Debug(System.Func{System.String},System.Func{System.Exception})">
            <summary>
            Writes a "debug" level message to the log, including detailed information from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
            <param name="exCallback">The exception that triggered this log message.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Info(System.Func{System.String})">
            <summary>
            Writes a "info" level message to the log.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Info(System.Func{System.String},System.Func{System.Exception})">
            <summary>
            Writes a "info" level message to the log, including detailed information from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
            <param name="exCallback">The exception that triggered this log message.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Warn(System.Func{System.String})">
            <summary>
            Writes a "warn(ing)" level message to the log.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Warn(System.Func{System.String},System.Func{System.Exception})">
            <summary>
            Writes a "warn(ing)" level message to the log, including detailed information from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
            <param name="exCallback">The exception that triggered this log message.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Error(System.Func{System.String})">
            <summary>
            Writes a "error" level message to the log.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
        </member>
        <member name="M:NCron.Logging.ILog.Error(System.Func{System.String},System.Func{System.Exception})">
            <summary>
            Writes a "error" level message to the log, including detailed information from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="msgCallback">The message to be written to the log.</param>
            <param name="exCallback">The exception that triggered this log message.</param>
        </member>
        <member name="M:NCron.Logging.EventLogAdapter.#ctor(System.Diagnostics.EventLog)">
            <summary>
            Creates a new instance of the <see cref="T:NCron.Logging.EventLogAdapter"/> class for a specified <see cref="T:System.Diagnostics.EventLog"/> instance.
            </summary>
            <param name="log">The event log to which error messages should be written.</param>
        </member>
        <member name="T:NCron.ICronJob">
            <summary>
            Defines the interface to be implemented by all NCron jobs.
            </summary>
        </member>
        <member name="M:NCron.ICronJob.Initialize(NCron.CronContext)">
            <summary>
            This method is invoked before the job is executed and is used to pass context information to the job.
            </summary>
            <param name="context">Contains information about the context in which the job is executed.</param>
        </member>
        <member name="M:NCron.ICronJob.Execute">
            <summary>
            This method is invoked whenever the job is due for execution, after job initialization.
            </summary>
        </member>
        <member name="T:NCron.Service.ISchedulingService">
            <summary>
            Executes jobs according to specified schedules.
            </summary>
        </member>
        <member name="M:NCron.Service.ISchedulingService.AddScheduledJob(System.Func{System.DateTime,System.DateTime},NCron.Service.JobExecutionWrapper)">
            <summary>
            Adds a scheduled job for automatic execution by this service.
            </summary>
            <param name="schedule">A method for computation of occurrences in the schedule, taking last execution as parameter.</param>
            <param name="executionWrapper">The execution wrapper method to be invoked on each occurence of the job.</param>
            <returns>The newly scheduled job.</returns>
        </member>
        <member name="M:NCron.Service.ISchedulingService.AddNamedJob(System.String,NCron.Service.JobExecutionWrapper)">
            <summary>
            Adds a named job for manual execution by this service.
            </summary>
            <param name="name">The name under which the job should be registered.</param>
            <param name="executionWrapper">The execution wrapper method to be invoked on each invocation of the job.</param>
        </member>
        <member name="M:NCron.Service.ISchedulingService.Start">
            <summary>
            Starts the scheduling service.
            </summary>
        </member>
        <member name="M:NCron.Service.ISchedulingService.Stop">
            <summary>
            Stops the scheduling service.
            </summary>
        </member>
        <member name="P:NCron.Service.ISchedulingService.LogFactory">
            <summary>
            Sets the log factory that is used to create a log for each job execution.
            </summary>
        </member>
        <member name="T:NCron.Fluent.Generics.Extensions">
            <summary>
            Provides extension methods on the fluent API, allowing job registrations by type paramter.
            </summary>
        </member>
        <member name="M:NCron.Fluent.Generics.Extensions.Run``1(NCron.Fluent.SchedulePart)">
            <summary>
            Registers a job for execution using the job type as generic parameter.
            </summary>
            <typeparam name="TJob">The type of job to be registered. Must implement <see cref="T:NCron.ICronJob"/> and must have a default (parameterless) constructor.</typeparam>
            <param name="part">The fluent part upon which the job is to be registered.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="T:NCron.Service.ScheduledJob">
            <summary>
            Defines a job scheduled for execution.
            </summary>
        </member>
        <member name="P:NCron.Service.ScheduledJob.ExecutionWrapper">
            <summary>
            Gets the execution wrapper method to be invoked on each occurence of the job.
            </summary>
        </member>
        <member name="P:NCron.Service.ScheduledJob.NextOccurence">
            <summary>
            Gets the date and time of the next occurence of the job.
            </summary>
        </member>
        <member name="T:NCron.Logging.ILogFactory">
            <summary>
            Defines the interface of a factory that allows creation of <see cref="T:NCron.Logging.ILog"/> instances for specific jobs.
            This is the interface to implement, if you need integration with a third-party logging framework.
            </summary>
        </member>
        <member name="M:NCron.Logging.ILogFactory.GetLogForJob(NCron.ICronJob)">
            <summary>
            Gets the log to be used by a specific job.
            </summary>
            <param name="job">The job for which a log should be retrieved.</param>
            <returns>An implementation of <see cref="T:NCron.Logging.ILog"/> for the specified job.</returns>
        </member>
        <member name="T:NCron.Logging.DefaultLogFactory">
            <summary>
            Implements the <see cref="T:NCron.Logging.ILogFactory"/> returning <see cref="T:NCron.Logging.EventLogAdapter"/> instances for all requests.
            </summary>
        </member>
        <member name="M:NCron.Logging.DefaultLogFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NCron.Logging.DefaultLogFactory"/> class.
            </summary>
        </member>
        <member name="M:NCron.Logging.DefaultLogFactory.GetLogForJob(NCron.ICronJob)">
            <summary>
            Gets an <see cref="T:NCron.Logging.EventLogAdapter"/> instance, writing to the "Application" event log with a source name of "NCron".
            </summary>
            <param name="job">The job which the log will be used with. This parameter is ignored.</param>
            <returns>An <see cref="T:NCron.Logging.EventLogAdapter"/>, writing to the "Application" event log with a source name of "NCron".</returns>
        </member>
        <member name="T:NCron.Fluent.Reflection.Extensions">
            <summary>
            Provides extension methods on the fluent API, allowing job registrations by late bound type references.
            </summary>
        </member>
        <member name="M:NCron.Fluent.Reflection.Extensions.Run(NCron.Fluent.SchedulePart,System.Type)">
            <summary>
            Registers a job for execution using the job type as parameter.
            </summary>
            <param name="part">The fluent part upon which the job is to be registered.</param>
            <param name="jobType">The type of the job to be created.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="M:NCron.Fluent.Reflection.Extensions.Run(NCron.Fluent.SchedulePart,System.String)">
            <summary>
            Registers a job for execution using the job type name as parameter.
            </summary>
            <param name="part">The fluent part upon which the job is to be registered.</param>
            <param name="jobType">The fully qualified type name of the job (including assembly name if from seperate assembly).</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="T:NCron.Fluent.JobPart">
            <summary>
            Represents a configured schedule entry in the fluent API.
            </summary>
        </member>
        <member name="M:NCron.Fluent.JobPart.Named(System.String)">
            <summary>
            Attaches a name to the schedule entry, allowing it to be executed outside of its schedule using a command line argument.
            </summary>
            <param name="name">The name under which the schedule entry should be registered.</param>
        </member>
        <member name="T:NCron.CronJob">
            <summary>
            Provides an abstract implementation of the <see cref="T:NCron.ICronJob"/> interface.
            Extending this class, rather than implementing <see cref="T:NCron.ICronJob"/> directly, makes it easier to implement new jobs.
            </summary>
        </member>
        <member name="M:NCron.CronJob.Initialize(NCron.CronContext)">
            <summary>
            This method is invoked before the job is executed and is used to pass context information to the job.
            The context gets stored in the <see cref="P:NCron.CronJob.Context"/> property.
            </summary>
            <param name="context">Contains information about the context in which the job is executed.</param>
        </member>
        <member name="M:NCron.CronJob.Execute">
            <summary>
            This method is invoked whenever the job is due for execution, after job initialization.
            </summary>
        </member>
        <member name="M:NCron.CronJob.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NCron.CronJob"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:NCron.CronJob.Context">
            <summary>
            Gets the <see cref="T:NCron.CronContext"/> in which the job is being executed.
            </summary>
        </member>
        <member name="P:NCron.CronJob.Log">
            <summary>
            Gets the <see cref="T:NCron.Logging.ILog"/> from the current <see cref="T:NCron.CronContext"/>.
            </summary>
        </member>
        <member name="T:NCron.Fluent.Crontab.Extensions">
            <summary>
            Provides extension methods on the fluent API, allowing easy use of crontab expressions.
            </summary>
        </member>
        <member name="M:NCron.Fluent.Crontab.Extensions.At(NCron.Service.ISchedulingService,System.String)">
            <summary>
            Creates a new schedule based on a crontab expression (eg: 0 0 * * *).
            Please refer to the project wiki for examples.
            </summary>
            <param name="service">The service to which the schedule should be added.</param>
            <param name="crontab">A crontab expression describing the schedule.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="M:NCron.Fluent.Crontab.Extensions.Hourly(NCron.Service.ISchedulingService)">
            <summary>
            Creates a new schedule executing once every hour.
            </summary>
            <param name="service">The service to which the schedule should be added.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="M:NCron.Fluent.Crontab.Extensions.Daily(NCron.Service.ISchedulingService)">
            <summary>
            Creates a new schedule executing once every day.
            </summary>
            <param name="service">The service to which the schedule should be added.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="M:NCron.Fluent.Crontab.Extensions.Weekly(NCron.Service.ISchedulingService)">
            <summary>
            Creates a new schedule executing once every week.
            </summary>
            <param name="service">The service to which the schedule should be added.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="M:NCron.Fluent.Crontab.Extensions.Monthly(NCron.Service.ISchedulingService)">
            <summary>
            Creates a new schedule executing once every month.
            </summary>
            <param name="service">The service to which the schedule should be added.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="T:NCron.Fluent.Extensions">
            <summary>
            Provides extension methods on the fluent API, allowing fluent schedule registrations.
            </summary>
        </member>
        <member name="M:NCron.Fluent.Extensions.At(NCron.Service.ISchedulingService,System.Func{System.DateTime,System.DateTime})">
            <summary>
            Adds a new schedule to the service and returns an object that allows a chained fluent job registration.
            </summary>
            <param name="service">The service to which the schedule should be added.</param>
            <param name="schedule">A method for calculating the next occurence from a specified base.</param>
            <returns>A part that allows chained fluent method calls.</returns>
        </member>
        <member name="T:NCron.Service.SchedulingService">
            <summary>
            Executes jobs according to specified schedules.
            </summary>
        </member>
        <member name="M:NCron.Service.SchedulingService.AddScheduledJob(System.Func{System.DateTime,System.DateTime},NCron.Service.JobExecutionWrapper)">
            <summary>
            Adds a scheduled job for automatic execution by this service.
            </summary>
            <param name="schedule">A method for computation of occurrences in the schedule, taking last execution as parameter.</param>
            <param name="executionWrapper">The execution wrapper method to be invoked on each occurence of the job.</param>
            <returns>The newly scheduled job.</returns>
        </member>
        <member name="M:NCron.Service.SchedulingService.AddNamedJob(System.String,NCron.Service.JobExecutionWrapper)">
            <summary>
            Adds a named job for manual execution by this service.
            </summary>
            <param name="name">The name under which the job should be registered.</param>
            <param name="executionWrapper">The execution wrapper method to be invoked on each invocation of the job.</param>
        </member>
        <member name="P:NCron.Service.SchedulingService.LogFactory">
            <summary>
            Sets the log factory that is used to create a log for each job execution.
            </summary>
        </member>
    </members>
</doc>
